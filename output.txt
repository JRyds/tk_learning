
=== Contents of file: C:/Users/jpryd/Documents/Ruby/tk_learning/TodoList/classes/dataio.rb ===
class DataIO
  # TODO: Methods for file I/O operations


  def initialize
    # Initialization logic goes here
  end
end

=== Contents of file: C:/Users/jpryd/Documents/Ruby/tk_learning/TodoList/classes/user.rb ===
class User
  # TODO: Methods for user data management and validations

  def initialize
    # Initialization logic goes here
  end
end

=== Contents of file: C:/Users/jpryd/Documents/Ruby/tk_learning/TodoList/classes/ui.rb ===

require "tk"
# require "user"

class UI
  # TODO: Methods for GUI creation and user input collection
  attr_reader :root
  def initialize
    @root = TkRoot.new do
      title "Todo List App"
      geometry "800x600+#{(TkWinfo.screenwidth(self) - 800) / 2}+#{(TkWinfo.screenheight(self) - 600) / 2}"
    end
    @root.minsize(300, 200)

    # Create an invisible 3x3 grid
    3.times do |i|
      3.times do |j|
        TkLabel.new(@root).grid(row: i, column: j)
      end
    end

    # Create the welcome message
    TkLabel.new(@root) do
      text "Welcome To The Todo List App.\nPlease Choose An Option:"
      grid(row: 1, column: 1)
    end

    # Create and configure the "Login" and "Signup" buttons here
    @login_button = TkButton.new(@root) do
      text 'Login'
      command proc { handle_login }
    end
    @login_button.grid(row: 2, column: 1)

    @signup_button = TkButton.new(@root) do
      text 'Signup'
      command proc { handle_signup }
    end
    @signup_button.grid(row: 3, column: 1)
  end
  # ... rest of your class ...


  def handle_login
    # instantiate a Login object and call its methods here
    login = Login.new
    login.show_dialog
  end

  def handle_signup
    # instantiate a Signup object and call its methods here
    signup = Signup.new
    signup.show_dialog
  end
end

=== Contents of file: C:/Users/jpryd/Documents/Ruby/tk_learning/TodoList/application.rb ===

require_relative 'classes/ui'

class Application
  # TODO: Methods for controlling the flow of the program and coordinating between the UI, User, and DataIO classes


  def initialize
    # Initialization logic goes here
    @ui = UI.new
  end

  def run
    @ui.root.mainloop
  end

end

app = Application.new
app.run

